<project
>

	<property file="local_build.properties"/>
	<property file="build.properties"/>

	<taskdef
		classpath="lib/de.unkrig.ant-contrib.jar"
		resource="de/unkrig/antcontrib/ant.xml"
	/>

	<taskdef
		classpath="lib/ant-contrib-1.0b3.jar"
		resource="net/sf/antcontrib/antlib.xml"
	/>

	<!-- Task 'ftp2' which adds support for FTP proxies. -->
	<taskdef
		classpath="lib/ant_issue_54883.jar"
		resource="ant_issue_54883.properties"
	/>

	<!-- MAVEN ant tasks. -->
	<taskdef
		classpath="lib/maven-ant-tasks-2.1.3.jar"
		resource="org/apache/maven/artifact/ant/antlib.xml"
		uri=""
	/>

	<target name="publish" description="Uploads './mirror' to 'unkrig.de/janino'">

		<!-- Have the FTP parameters entered/confirmed by the user. -->
		<swingDialog title="FTP upload of update site">
			<label text="Server:"                   /><text property="ftp.server"         defaultvalue="${ftp.server}"/>
			<label text="Port (optional):"          /><text property="ftp.port"           defaultvalue="${ftp.port}"/>
			<label text="User ID:"                  /><text property="ftp.userid"         defaultvalue="${ftp.userid}"/>
			<label text="Password:"                 /><text property="ftp.password"       defaultvalue="${ftp.password}" secure="true" focus="true" />
			<label text="Proxy server (optional):"  /><text property="ftp.proxy.server"   defaultvalue="${ftp.proxy.server}"/>
			<label text="Proxy port (optional):"    /><text property="ftp.proxy.port"     defaultvalue="${ftp.proxy.port}"/>
			<label text="Proxy user ID (optional):" /><text property="ftp.proxy.userid"   defaultvalue="${ftp.proxy.userid}"/>
			<label text="Proxy password (optional):"/><text property="ftp.proxy.password" defaultvalue="${ftp.proxy.password}" secure="true"/>
			<label text="Remote directory:"         /><text property="ftp.remotedir"      defaultvalue="${ftp.remotedir}"/>
			<checkbox text="Use passive FTP"   property="ftp.passive" preselected="true"/>
			<checkbox text="Verbose reporting" property="ftp.verbose" preselected="true"/>
		</swingDialog>

		<!--
			Check if that version has been published before.
		-->
		<fileset dir="mirror/download" includes="janino-*.zip" id="jz" />
		<property name="janino.zip" refid="jz" />
		<echo message="${janino.zip}" />
		<ftp2
			server        ="${ftp.server}"
			port          ="${ftp.port}"
			userid        ="${ftp.userid}"
			password      ="${ftp.password}"
			proxyServer   ="${ftp.proxy.server}"
			proxyPort     ="${ftp.proxy.port}"
			proxyUserid   ="${ftp.proxy.userid}"
			proxyPassword ="${ftp.proxy.password}"
			remotedir     ="${ftp.remotedir}"
			passive       ="${ftp.passive}"
			verbose       ="${ftp.verbose}"
			action        ="list"
			listing       ="listing.txt"
		>
			<fileset dir="mirror" includes="download/${janino.zip}" />
		</ftp2>
		<if>
			<length file="listing.txt" when="greater" length="0" />
			<then>
				<swingDialog messageType="WARNING">
					<label text="'${janino.zip}' already exists" />
					<label text="on the remote server!" />
					<label text="Are you sure you want to continue?" />
				</swingDialog>
			</then>
		</if>
		<delete file="listing.txt" />

		<!--
			If there are problems with the FTP upload, add argument '-debug' to the ANT external tool configuration.

			An attribute 'depends="yes"' could speed up the upload, because it uploads only the files that have
			changed since the last successful upload.

			An attribute 'retriesAllowed="x"', however, is a bad idea, because it does not RECONNECT to the FTP server,
			but simply retries the FTP command, which is 99.9% prone to fail (how braindead is that?).
		-->
		<ftp2
			server        ="${ftp.server}"
			port          ="${ftp.port}"
			userid        ="${ftp.userid}"
			password      ="${ftp.password}"
			proxyServer   ="${ftp.proxy.server}"
			proxyPort     ="${ftp.proxy.port}"
			proxyUserid   ="${ftp.proxy.userid}"
			proxyPassword ="${ftp.proxy.password}"
			remotedir     ="${ftp.remotedir}"
			passive       ="${ftp.passive}"
			verbose       ="${ftp.verbose}"
			action        ="put"
		>
			<fileset dir="mirror"/>
		</ftp2>

		<echo message="*** The next step is to execute target 'stage', which publishes the artifacts for MAVEN." />
	</target>

	<target name="stage" description="Deploy release version to Maven staging repository.">

		<!-- Enter the GPG passphrase. -->
		<var name="gpg.passphrase" unset="true" />
		<swingDialog title="Deploying to staging repository">
			<label text="GPG passphrase" />
			<text property="gpg.passphrase" secure="true" focus="true" />
		</swingDialog>

		<forEach2 list="commons-compiler,commons-compiler-jdk,janino,janino-parent" param="artifactId">
			<sequential>

				<echo message="*** Sign and deploy '@{artifactId}/target/@{artifactId}-${version}.jar'." />
				<echo message="Notice: If you get a 401, check '~/.m2/settings.xml'." />
				<mvn failonerror="true">
					<arg value="org.apache.maven.plugins:maven-gpg-plugin:1.3:sign-and-deploy-file" />
					<arg value="-Durl=${maven-staging-repository-url}" />
					<arg value="-DrepositoryId=${maven-staging-repository-id}" />
					<arg value="-DpomFile=../@{artifactId}/pom.xml" />
					<arg value="-Dfile=../@{artifactId}/target/@{artifactId}-${version}.jar" />
					<arg value="-Dgpg.passphrase=${gpg.passphrase}" />
					<arg value="-Dgpg.executable=${gpg.executable}" />
					<arg value="-Pgpg" />
				</mvn>

				<if><available file="../@{artifactId}/target/@{artifactId}-${version}-sources.jar" /><then>
					<echo message="*** Sign and deploy '@{artifactId}-${version}-sources.jar'." />
					<mvn failonerror="true">
						<arg value="org.apache.maven.plugins:maven-gpg-plugin:1.3:sign-and-deploy-file" />
						<arg value="-Durl=${maven-staging-repository-url}" />
						<arg value="-DrepositoryId=${maven-staging-repository-id}" />
						<arg value="-DpomFile=../@{artifactId}/pom.xml" />
						<arg value="-Dfile=../@{artifactId}/target/@{artifactId}-${version}-sources.jar" />
						<arg value="-Dclassifier=sources" />
						<arg value="-Dgpg.passphrase=${gpg.passphrase}" />
						<arg value="-Dgpg.executable=${gpg.executable}" />
						<arg value="-Pgpg" />
					</mvn>
				</then></if>

				<if><available file="../@{artifactId}/target/@{artifactId}-${version}-javadoc.jar" /><then>
					<echo message="*** Sign and deploy '@{artifactId}-${version}-javadoc.jar'." />
					<mvn failonerror="true">
						<arg value="org.apache.maven.plugins:maven-gpg-plugin:1.3:sign-and-deploy-file" />
						<arg value="-Durl=${maven-staging-repository-url}" />
						<arg value="-DrepositoryId=${maven-staging-repository-id}" />
						<arg value="-DpomFile=../@{artifactId}/pom.xml" />
						<arg value="-Dfile=../@{artifactId}/target/@{artifactId}-${version}-javadoc.jar" />
						<arg value="-Dclassifier=javadoc" />
						<arg value="-Dgpg.passphrase=${gpg.passphrase}" />
						<arg value="-Dgpg.executable=${gpg.executable}" />
						<arg value="-Pgpg" />
					</mvn>
				</then></if>
			</sequential>
		</forEach2>

		<echo level="error" message="*** Now open 'https://oss.sonatype.org/#stagingRepositories', select repository 'orgcodehausjanino-*', check its" />
		<echo level="error" message="*** content, then hit 'Close' and afterwards 'Release'." />
		<echo level="error" message="***" />
		<echo level="error" message="*** Eventually, you should see the released artifacts on" />
		<echo level="error" message="*** 'https://oss.sonatype.org/content/groups/public/org/codehaus/janino/' and" />
		<echo level="error" message="*** 'https://repo1.maven.org/maven2/org/codehaus/janino/'." />
	</target>
</project>
